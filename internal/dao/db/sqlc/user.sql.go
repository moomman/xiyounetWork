// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const checkUserRepeat = `-- name: CheckUserRepeat :one
select count(*) from ttmsz.public."user"
where username = $1
or email = $2
`

type CheckUserRepeatParams struct {
	Username string `json:"username"`
	Email    string `json:"email"`
}

func (q *Queries) CheckUserRepeat(ctx context.Context, arg *CheckUserRepeatParams) (int64, error) {
	row := q.db.QueryRow(ctx, checkUserRepeat, arg.Username, arg.Email)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
insert into ttms.public."user"
(username,
 password,
 avatar,
 email,
 birthday,
 signature,
 privilege)
values ($1,
        $2,
        $3,
        $4,
        $5,
        $6,
        $7)
returning id, username, password, avatar, lifestate, hobby, email, birthday, gender, signature, privilege
`

type CreateUserParams struct {
	Username  string    `json:"username"`
	Password  string    `json:"password"`
	Avatar    string    `json:"avatar"`
	Email     string    `json:"email"`
	Birthday  time.Time `json:"birthday"`
	Signature string    `json:"signature"`
	Privilege Privilege `json:"privilege"`
}

type CreateUserRow struct {
	ID        int64          `json:"id"`
	Username  string         `json:"username"`
	Password  string         `json:"password"`
	Avatar    string         `json:"avatar"`
	Lifestate Lifestate      `json:"lifestate"`
	Hobby     sql.NullString `json:"hobby"`
	Email     string         `json:"email"`
	Birthday  time.Time      `json:"birthday"`
	Gender    Gender         `json:"gender"`
	Signature string         `json:"signature"`
	Privilege Privilege      `json:"privilege"`
}

func (q *Queries) CreateUser(ctx context.Context, arg *CreateUserParams) (*CreateUserRow, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.Password,
		arg.Avatar,
		arg.Email,
		arg.Birthday,
		arg.Signature,
		arg.Privilege,
	)
	var i CreateUserRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Avatar,
		&i.Lifestate,
		&i.Hobby,
		&i.Email,
		&i.Birthday,
		&i.Gender,
		&i.Signature,
		&i.Privilege,
	)
	return &i, err
}

const deleteUser = `-- name: DeleteUser :exec
delete from ttms.public."user"
where id = $1::bigint
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const deleteUserById = `-- name: DeleteUserById :exec
delete from
ttms.public."user"
where id = $1
`

func (q *Queries) DeleteUserById(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUserById, id)
	return err
}

const getUserById = `-- name: GetUserById :one
select id, username, password, avatar, lifestate, hobby, email, birthday, gender, signature, privilege from ttms.public."user"
where id = $1::bigint
`

type GetUserByIdRow struct {
	ID        int64          `json:"id"`
	Username  string         `json:"username"`
	Password  string         `json:"password"`
	Avatar    string         `json:"avatar"`
	Lifestate Lifestate      `json:"lifestate"`
	Hobby     sql.NullString `json:"hobby"`
	Email     string         `json:"email"`
	Birthday  time.Time      `json:"birthday"`
	Gender    Gender         `json:"gender"`
	Signature string         `json:"signature"`
	Privilege Privilege      `json:"privilege"`
}

func (q *Queries) GetUserById(ctx context.Context, id int64) (*GetUserByIdRow, error) {
	row := q.db.QueryRow(ctx, getUserById, id)
	var i GetUserByIdRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Avatar,
		&i.Lifestate,
		&i.Hobby,
		&i.Email,
		&i.Birthday,
		&i.Gender,
		&i.Signature,
		&i.Privilege,
	)
	return &i, err
}

const getUserByName = `-- name: GetUserByName :one
select id, username, password, avatar, lifestate, hobby, email, birthday, gender, signature, privilege from ttms.public."user"
where username = $1::varchar
`

type GetUserByNameRow struct {
	ID        int64          `json:"id"`
	Username  string         `json:"username"`
	Password  string         `json:"password"`
	Avatar    string         `json:"avatar"`
	Lifestate Lifestate      `json:"lifestate"`
	Hobby     sql.NullString `json:"hobby"`
	Email     string         `json:"email"`
	Birthday  time.Time      `json:"birthday"`
	Gender    Gender         `json:"gender"`
	Signature string         `json:"signature"`
	Privilege Privilege      `json:"privilege"`
}

func (q *Queries) GetUserByName(ctx context.Context, username string) (*GetUserByNameRow, error) {
	row := q.db.QueryRow(ctx, getUserByName, username)
	var i GetUserByNameRow
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.Password,
		&i.Avatar,
		&i.Lifestate,
		&i.Hobby,
		&i.Email,
		&i.Birthday,
		&i.Gender,
		&i.Signature,
		&i.Privilege,
	)
	return &i, err
}

const getUsers = `-- name: GetUsers :many
select id, username, password, avatar, lifestate, hobby, email, birthday, gender, signature, privilege from ttms.public."user"
`

type GetUsersRow struct {
	ID        int64          `json:"id"`
	Username  string         `json:"username"`
	Password  string         `json:"password"`
	Avatar    string         `json:"avatar"`
	Lifestate Lifestate      `json:"lifestate"`
	Hobby     sql.NullString `json:"hobby"`
	Email     string         `json:"email"`
	Birthday  time.Time      `json:"birthday"`
	Gender    Gender         `json:"gender"`
	Signature string         `json:"signature"`
	Privilege Privilege      `json:"privilege"`
}

func (q *Queries) GetUsers(ctx context.Context) ([]*GetUsersRow, error) {
	rows, err := q.db.Query(ctx, getUsers)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*GetUsersRow{}
	for rows.Next() {
		var i GetUsersRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Password,
			&i.Avatar,
			&i.Lifestate,
			&i.Hobby,
			&i.Email,
			&i.Birthday,
			&i.Gender,
			&i.Signature,
			&i.Privilege,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listNameNum = `-- name: ListNameNum :one
select count(*) from
ttms.public."user"
where username like $1
`

func (q *Queries) ListNameNum(ctx context.Context, username string) (int64, error) {
	row := q.db.QueryRow(ctx, listNameNum, username)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listNum = `-- name: ListNum :one
select count(*) from ttms.public."user"
`

func (q *Queries) ListNum(ctx context.Context) (int64, error) {
	row := q.db.QueryRow(ctx, listNum)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const listUserInfo = `-- name: ListUserInfo :many
select id,username,email,privilege
from ttms.public."user"
order by id desc
limit $1 offset $2
`

type ListUserInfoParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type ListUserInfoRow struct {
	ID        int64     `json:"id"`
	Username  string    `json:"username"`
	Email     string    `json:"email"`
	Privilege Privilege `json:"privilege"`
}

func (q *Queries) ListUserInfo(ctx context.Context, arg *ListUserInfoParams) ([]*ListUserInfoRow, error) {
	rows, err := q.db.Query(ctx, listUserInfo, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*ListUserInfoRow{}
	for rows.Next() {
		var i ListUserInfoRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Privilege,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const searchUserByName = `-- name: SearchUserByName :many
select id,username,email,privilege
from ttms.public."user"
where username like $3
order by id desc
limit $1 offset $2
`

type SearchUserByNameParams struct {
	Limit    int32  `json:"limit"`
	Offset   int32  `json:"offset"`
	Username string `json:"username"`
}

type SearchUserByNameRow struct {
	ID        int64     `json:"id"`
	Username  string    `json:"username"`
	Email     string    `json:"email"`
	Privilege Privilege `json:"privilege"`
}

func (q *Queries) SearchUserByName(ctx context.Context, arg *SearchUserByNameParams) ([]*SearchUserByNameRow, error) {
	rows, err := q.db.Query(ctx, searchUserByName, arg.Limit, arg.Offset, arg.Username)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []*SearchUserByNameRow{}
	for rows.Next() {
		var i SearchUserByNameRow
		if err := rows.Scan(
			&i.ID,
			&i.Username,
			&i.Email,
			&i.Privilege,
		); err != nil {
			return nil, err
		}
		items = append(items, &i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePassword = `-- name: UpdatePassword :exec
update ttms.public."user"
set password = $1
where email = $2
`

type UpdatePasswordParams struct {
	Password string `json:"password"`
	Email    string `json:"email"`
}

func (q *Queries) UpdatePassword(ctx context.Context, arg *UpdatePasswordParams) error {
	_, err := q.db.Exec(ctx, updatePassword, arg.Password, arg.Email)
	return err
}

const updateUser = `-- name: UpdateUser :exec
update ttms.public."user"
set username = $1,
    email = $2,
    birthday = $3,
    gender = $4,
    signature = $5,
    hobby = $6,
    lifestate = $7
where id = $8
`

type UpdateUserParams struct {
	Username  string         `json:"username"`
	Email     string         `json:"email"`
	Birthday  time.Time      `json:"birthday"`
	Gender    Gender         `json:"gender"`
	Signature string         `json:"signature"`
	Hobby     sql.NullString `json:"hobby"`
	Lifestate Lifestate      `json:"lifestate"`
	ID        int64          `json:"id"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg *UpdateUserParams) error {
	_, err := q.db.Exec(ctx, updateUser,
		arg.Username,
		arg.Email,
		arg.Birthday,
		arg.Gender,
		arg.Signature,
		arg.Hobby,
		arg.Lifestate,
		arg.ID,
	)
	return err
}

const updateUserAvatar = `-- name: UpdateUserAvatar :exec
update ttms.public."user"
set avatar = $1
where id = $2
`

type UpdateUserAvatarParams struct {
	Avatar string `json:"avatar"`
	ID     int64  `json:"id"`
}

func (q *Queries) UpdateUserAvatar(ctx context.Context, arg *UpdateUserAvatarParams) error {
	_, err := q.db.Exec(ctx, updateUserAvatar, arg.Avatar, arg.ID)
	return err
}
