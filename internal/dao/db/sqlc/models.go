// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0

package db

import (
	"database/sql"
	"fmt"
	"time"
)

type Gender string

const (
	GenderValue0 Gender = "男"
	GenderValue1 Gender = "女"
	GenderValue2 Gender = "未知"
)

func (e *Gender) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Gender(s)
	case string:
		*e = Gender(s)
	default:
		return fmt.Errorf("unsupported scan type for Gender: %T", src)
	}
	return nil
}

type Lifestate string

const (
	LifestateValue0 Lifestate = "单身"
	LifestateValue1 Lifestate = "热恋"
	LifestateValue2 Lifestate = "已婚"
	LifestateValue3 Lifestate = "为人父母"
	LifestateValue4 Lifestate = "未知"
)

func (e *Lifestate) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Lifestate(s)
	case string:
		*e = Lifestate(s)
	default:
		return fmt.Errorf("unsupported scan type for Lifestate: %T", src)
	}
	return nil
}

type Privilege string

const (
	PrivilegeBAN    Privilege = "BAN"
	PrivilegeValue1 Privilege = "管理员"
	PrivilegeValue2 Privilege = "用户"
)

func (e *Privilege) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = Privilege(s)
	case string:
		*e = Privilege(s)
	default:
		return fmt.Errorf("unsupported scan type for Privilege: %T", src)
	}
	return nil
}

type User struct {
	ID        int64          `json:"id"`
	Username  string         `json:"username"`
	Password  string         `json:"password"`
	Avatar    string         `json:"avatar"`
	Lifestate Lifestate      `json:"lifestate"`
	Hobby     sql.NullString `json:"hobby"`
	Email     string         `json:"email"`
	Birthday  time.Time      `json:"birthday"`
	Gender    Gender         `json:"gender"`
	Signature string         `json:"signature"`
	Privilege Privilege      `json:"privilege"`
}
